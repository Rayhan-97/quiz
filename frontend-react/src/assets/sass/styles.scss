@use 'sass:math';
@use 'sass:color';
@use 'sass:map';
@use 'sass:list';

@import url('https://fonts.googleapis.com/css2?family=Outfit:wght@400;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');

@function strip-units($number) {
    @return math.div($number, ($number * 0 + 1));
}

@function toRem($pixelValue) {
    @return math.div(strip-units($pixelValue), 16) * 1rem;
}

@mixin flexCentre($direction: row) {
    display: flex;
    flex-direction: $direction;
    justify-content: center;
    align-items: center;
}


$white-100: hsl (0, 0, 100%);
$white-73: hsl(0, 0%, 73%);


$colors: (
    'light': ('bg': hsl(0, 0%, 96%),
        'bg-contrast': hsl(0, 0%, 100%),
        'fg': hsl(0, 0%, 0%) '0, 0, 0',
        'fg-light': hsl(0, 0%, 9%),
        'primary': hsl(253, 51%, 43%),
        'nav': hsl(253, 51%, 43%),

    ),
    'dark': ('bg': hsl(0, 0%, 9%),
        'bg-contrast': hsl(0, 0%, 0%),
        'fg': hsl(0, 0%, 100%) '255, 255, 255',
        'fg-light': hsl(0, 0%, 73%),
        'primary': hsl(253, 51%, 43%),
        'nav': hsl(0, 0%, 0%),
    )
);

@function themedColor($colorName) {
    @return var(--#{$colorName});
}

$themeMap: null;

@mixin themify() {
    @each $theme, $localThemeMap in $colors {
        .theme-#{$theme} {
            $themeMap: $localThemeMap !global;
            @content
        }
    }
}

@function t($key, $index: 1) {
    $colorValues: map-get($map: $themeMap, $key: $key);
    @return nth($colorValues, $index);
}

:root {
    .theme-light {
        @each $colorVar, $values in map-get($map: $colors, $key: 'light') {
            $suffixes: (
                '',
                '-rgb',
            );

            @for $i from 1 through length($values) {
                $cssVariableName: --#{$colorVar}#{nth($suffixes, $i)};
                #{$cssVariableName}: #{nth($values, $i)};
            }
        }
    }

    .theme-dark {
        @each $colorVar, $values in map-get($map: $colors, $key: 'dark') {
            $suffixes: (
                '',
                '-rgb',
            );

            @for $i from 1 through length($values) {
                $cssVariableName: --#{$colorVar}#{nth($suffixes, $i)};
                #{$cssVariableName}: #{nth($values, $i)};
            }
        }
    }
}

/* Reset some basic elements */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: "Roboto", sans-serif;
    font-size: 1rem;
    line-height: 1.2rem;

    :focus {
        outline: none;
    }

    :focus-visible {
        outline-offset: toRem(4px);
    }

    @include themify() {
        :focus-visible {
            outline: solid toRem(2px) color.adjust($color: t(primary), $hue: 180);
        }
    }
}

.nav-container {
    container: navbar / inline-size;
    @include flexCentre(column);
}

nav {
    @include flexCentre();
    justify-content: space-between;
    width: 100%;
    padding: 0.5em 1em;
    background-color: themedColor(nav);
    border-bottom: 1px solid themedColor(fg);

    div {
        @include flexCentre();
        gap: toRem(20px);
    }

    a:has(.full-logo),
    a:has(button) {
        display: none;
    }
}

menu {
    @include flexCentre();
    flex-wrap: wrap;
    width: 100%;
    gap: toRem(20px);
    padding: 1.2em;
    background-color: themedColor(bg);
    border-bottom: 1px solid themedColor(fg);
}

@container navbar (min-width: 40em) {
    nav {
        width: calc(100% - 2em);
        max-width: 60em;
        border-radius: toRem(30px);
        border: none;
        padding: 1em 1.5em;
        margin-top: 1em;

        a:has(.full-logo),
        a:has(button) {
            display: block;
        }

        a:has(.logo) {
            display: none;
        }
    }

    menu {
        display: none;
    }

    .icon-wrapper {

        &:has(.hamburger-menu),
        &:has(.close) {
            display: none;
        }
    }
}

button {
    background-color: transparent;
    padding: 1em 3em;
    border: themedColor(fg) 1px solid;
    border-radius: toRem(30px);
    color: themedColor(fg);

    &.primary {
        border-color: transparent;
        background-color: themedColor(primary);
    }

    &:hover {
        background-color: themedColor(fg);
        color: themedColor(bg);
        border-color: themedColor(bg);
        cursor: pointer;
    }
}

.icon {
    height: toRem(24px);
    color: $white-73;

    &.logo,
    &.full-logo {
        height: toRem(48px);
    }

    &.sun {
        height: toRem(30px);
    }

    &.moon {
        height: toRem(28px);
    }

    &.clickable {
        :hover {
            cursor: pointer;
            color: white;
        }

        &::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            translate: -50% -50%;
            width: 100%;
            aspect-ratio: 1;
            background-color: rgba($white-73, $alpha: 0.2);
            opacity: 0;
            border-radius: 50%;
            box-sizing: content-box;
            padding: toRem(4px);
            pointer-events: none;

        }
    }

    &.close::before {
        padding: toRem(7px);
    }

    &.hamburger-menu::before {
        padding: toRem(5px);
    }
}

.icon-wrapper {
    position: relative;

    .icon:hover {
        &::before {
            opacity: 1;
        }
    }
}

.hidden,
.icon-wrapper:has(.hidden) {
    display: none;
}

a {
    color: themedColor(fg);
    text-decoration: none;
}








.content-container {
    display: flex;
    justify-content: center;
    padding: 2em;
}

.form {
    display: flex;
    flex-direction: column;
}

.login-form-container {
    display: flex;
    flex-direction: column;
}

.form-field {
    display: flex;
    flex-direction: column;
    padding-bottom: 6px;
    margin: 2px;
}

.form-error input {
    border-color: red;
}

.form-label {
    font-size: 16px;
    font-weight: bold;
    padding-right: 20px;
}

.errortext {
    color: "#EB3F24"
}